AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-stock-streaming-kinesis-kafka

Parameters:
  CreationDate:
    Type: String
    AllowedPattern: "^\\d{4}(-\\d{2}){2}$"
  StocksHost:
    Type: String
  StocksApiKey:
    Type: String
  StreamName:
    Type: String
    Default: stocks-stream-kinesis-lambda
  DeliveryStreamName:
    Type: String
    Default: stocks-raw-stream-kinesis-lambda
  StocksSnsTopicName:
    Type: String
    Default: stocks-stream-kinesis-lambda
  SnsSubscriptionEmail:
    Type: String
  KafkaBootstrapServer:
    Type: String
  KafkaSaslUsername:
    Type: String
  KafkaSaslPassword:
    Type: String
  ConfluentSchemaRegistryUrl:
    Type: String
  ConfluentSchemaRegistryKey:
    Type: String
  ConfluentSchemaRegistrySecret:
    Type: String
  KafkaTopic:
    Type: String
    Default: stocks

Resources:
  StocksStreamBucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: Private
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-bucket"
        - Key: Created
          Value: !Ref CreationDate

  ConfluentSinkUser:
    Type: AWS::IAM::User
    DependsOn: StocksStreamBucket
    Properties:
      UserName: ConfluentSinkUser
      Policies: 
        - PolicyDocument: {
            "Version": "2012-10-17",
            "Statement": [{
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "lambda:InvokeFunction",
                "lambda:GetFunction",
                "lambda:InvokeAsync"],
            "Resource": "*"
            }, {
              "Effect":"Allow",
              "Action":[
                  "s3:ListAllMyBuckets"
              ],
              "Resource":"arn:aws:s3:::*"
            }, {
              "Effect":"Allow",
              "Action":[
                  "s3:ListBucket",
                  "s3:GetBucketLocation"
              ],
              "Resource": !Sub "arn:aws:s3:::${StocksStreamBucket}"
            }, {
              "Effect":"Allow",
              "Action":[
                  "s3:PutObject",
                  "s3:GetObject",
                  "s3:AbortMultipartUpload",
                  "s3:ListMultipartUploadParts",
                  "s3:ListBucketMultipartUploads"

              ],
              "Resource": !Sub "arn:aws:s3:::${StocksStreamBucket}/*"
            }]
          }
          PolicyName: ConfluentSinkUserPolicy

  ConfluentSinkUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref ConfluentSinkUser

  StockAlertsSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref StocksSnsTopicName
      Subscription:
        - Endpoint: !Ref SnsSubscriptionEmail
          Protocol: email
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-sns-topic"
        - Key: Created
          Value: !Ref CreationDate

  SinkConsumerFunction:
    Type: AWS::Serverless::Function
    DependsOn: StockAlertsSnsTopic
    Properties:
      CodeUri: src/sink_consumer/
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          SNS_TOPIC: !Ref StockAlertsSnsTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt StockAlertsSnsTopic.TopicName

  SinkConsumerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SinkConsumerFunction}'
      RetentionInDays: 3

  KinesisStocksStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Ref StreamName
      ShardCount: 2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-stocks-stream"
        - Key: Created
          Value: !Ref CreationDate

  StocksProducerFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - StocksStreamBucket
      - KinesisStocksStream
    Properties:
      CodeUri: src/producer/
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 60
      MemorySize: 256
      Environment:
        Variables:
          KINESIS_STREAM: !Ref KinesisStocksStream
          S3_BUCKET: !Ref StocksStreamBucket
          STOCKS_S3KEY: 'stocks/stocks.json'
          YAHOO_QUOTES_URL: https://apidojo-yahoo-finance-v1.p.rapidapi.com/market/v2/get-quotes
          YAHOO_X_RAPIDAPI_HOST: !Ref StocksHost
          YAHOO_X_RAPIDAPI_KEY: !Ref StocksApiKey
          KAFKA_BOOTSTRAP_SERVER: !Ref KafkaBootstrapServer
          KAFKA_SASL_USERNAME: !Ref KafkaSaslUsername
          KAFKA_SASL_PASSWORD: !Ref KafkaSaslPassword
          KAFKA_TOPIC: !Ref KafkaTopic
          SR_URL: !Ref ConfluentSchemaRegistryUrl
          SR_KEY: !Ref ConfluentSchemaRegistryKey
          SR_SECRET: !Ref ConfluentSchemaRegistrySecret
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref StocksStreamBucket
        - KinesisCrudPolicy:
            StreamName: !Ref KinesisStocksStream
      Events:
        StocksFetchSchedule:
          Type: Schedule
          Properties:
            Schedule: 'rate(1 minute)'
            Name: 'stocks_data_fetch_schedule'
            Enabled: true
      Tags:
        Name: !Sub "${AWS::StackName}-producer-function"
        Created: !Ref CreationDate

  StocksProcessorFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - KinesisStocksStream
      - StocksStreamBucket
      - StockAlertsSnsTopic
    Properties:
      CodeUri: src/processor/
      Handler: app.lambda_handler
      Runtime: python3.8
      Timeout: 180
      MemorySize: 512
      Environment:
        Variables:
          S3_BUCKET: !Ref StocksStreamBucket
          OUTPUT_S3PREFIX: 'lambda-processed-stocks'
          SNS_TOPIC: !Ref StockAlertsSnsTopic
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref StocksStreamBucket
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt StockAlertsSnsTopic.TopicName
      Events:
        StreamEvent:
          Type: Kinesis
          Properties:
            Stream: !GetAtt KinesisStocksStream.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 45
            StartingPosition: TRIM_HORIZON
            Enabled: true
            TumblingWindowInSeconds: 120
            MaximumRetryAttempts: 2
      Tags:
        Name: !Sub "${AWS::StackName}-processor-function"
        Created: !Ref CreationDate

  DeliveryStreamRole:
    Type: AWS::IAM::Role
    DependsOn:
      - StocksStreamBucket
      - KinesisStocksStream
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "firehose.amazonaws.com"
            Action:
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                sts:ExternalId: !Ref AWS::AccountId
      Path: "/"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-delivery-role-policy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:AbortMultipartUpload"
                  - "s3:GetBucketLocation"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:PutObject"
                  - "kinesis:DescribeStream"
                  - "kinesis:GetShardIterator"
                  - "kinesis:GetRecords"
                Resource:
                  - !Sub "arn:aws:s3:::${StocksStreamBucket}"
                  - !Sub "arn:aws:s3:::${StocksStreamBucket}/*"
                  - !GetAtt KinesisStocksStream.Arn

  StocksDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn:
      - StocksStreamBucket
      - KinesisStocksStream
      - DeliveryStreamRole
    Properties:
      DeliveryStreamName: !Ref DeliveryStreamName
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt KinesisStocksStream.Arn
        RoleArn: !GetAtt DeliveryStreamRole.Arn
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt StocksStreamBucket.Arn
        BufferingHints:
          IntervalInSeconds: 120
          SizeInMBs: 50
        CompressionFormat: GZIP
        Prefix: kinesis-stocks-raw/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/
        ErrorOutputPrefix: kinesis-stocks-raw-errors/!{firehose:error-output-type}/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/
        RoleARN: !GetAtt DeliveryStreamRole.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-stocks-firehose"
        - Key: Created
          Value: !Ref CreationDate

Outputs:
  StockAlertsSnsTopic:
    Value: !Ref StockAlertsSnsTopic
  StocksStreamBucket:
    Value: !Ref StocksStreamBucket
  ConfluentSinkUserAccessKey:
    Value: !Ref ConfluentSinkUserAccessKey
  ConfluentSinkUserSecret:
    Value: !GetAtt ConfluentSinkUserAccessKey.SecretAccessKey
  SinkConsumerFunction:
    Value: !Ref SinkConsumerFunction